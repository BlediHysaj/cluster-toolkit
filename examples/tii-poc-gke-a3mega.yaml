# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

blueprint_name: gke-a3-mega-tii

# GCS bucket for persisting the Terraform state
terraform_backend_defaults:
  type: gcs
  configuration:
    bucket: <<GCS_BUCKET_NAME>>

vars:
  project_id:  ## Set GCP Project ID Here ##
  deployment_name: gke-a3-mega-tii
  region: us-central1
  zone: us-central1-a

  # Cidr block containing the IP of the machine calling terraform.
  # The following line must be updated for this example to work.
  authorized_cidr: <your-ip-address>/32

deployment_groups:
- group: primary
  modules:
  - id: network1
    source: modules/network/vpc
    settings:
      subnetwork_name: gke-subnet-a3-mega-tii
      mtu: 8244
      secondary_ranges:
        gke-subnet-a3-mega-tii:
        - range_name: pods
          ip_cidr_range: 10.4.0.0/14
        - range_name: services
          ip_cidr_range: 10.0.32.0/20

  - id: gke_service_account
    source: community/modules/project/service-account
    settings:
      name: gke-sa
      project_roles:
      - logging.logWriter
      - monitoring.metricWriter
      - monitoring.viewer
      - stackdriver.resourceMetadata.writer
      - storage.objectViewer
      - artifactregistry.reader

  - id: gpunets
    source: modules/network/multivpc
    settings:
      network_name_prefix: $(vars.deployment_name)-gpunet
      global_ip_address_range: 192.169.0.0/16
      network_count: 8
      subnetwork_cidr_suffix: 20
      mtu: 8244

  - id: gke_cluster
    source: modules/scheduler/gke-cluster
    use: [network1, gpunets, gke_service_account]
    settings:
      enable_private_endpoint: false  # Allows for access from authorized public IPs
      master_authorized_networks:
      - cidr_block: $(vars.authorized_cidr)  # Allows your machine run kubectl command. It's required for the multi-network setup.
        display_name: "kubectl-access-network"
    outputs: [instructions]

  - id: a3_megagpu_pool
    source: modules/compute/gke-node-pool
    use: [gke_cluster, gpunets, gke_service_account]
    settings:
      machine_type: a3-megagpu-8g
      static_node_count: 8
      local_ssd_count_nvme_block: 16
      reservation_affinity:
        consume_reservation_type: SPECIFIC_RESERVATION
        specific_reservations:
        - name: <<RESERVATION_NAME>>
          project: $(vars.project_id)
      placement_policy:
        type: COMPACT
        name: <<COMPACT_PLACEMENT_POLICY>>
      zones: [$(vars.zone)]
    outputs: [instructions]
